from anathema.utils.color import Color
from anathema.world.tile_type import TileType


class Tiles:

    # Temporary tiles for stage generation

    @staticmethod
    def unformed():
        """An unformed tile that can be turned into acquatic, passage, or solid."""
        return Tiles.tile("unformed", "?", Color.light_cool_gray()).open()

    @staticmethod
    def unformed_wet():
        """An unformed tile that can be turned into water of some kind when 'filled'
        or a bridge when used as a passage.
        """
        return Tiles.tile("unformed_wet", "≈", Color.light_blue()).open()

    @staticmethod
    def open():
        """An open foor tile generated by an architecture."""
        return Tiles.tile("open", "·", Color.light_cool_gray()).open()

    @staticmethod
    def solid():
        """A solid tile that has been filled in the passage generator."""
        return Tiles.tile("solid", "#", Color.light_cool_gray()).solid()

    @staticmethod
    def passage():
        """An open tile that the passage generator knows must remain open."""
        return Tiles.tile("passage", "-", Color.light_cool_gray()).open()

    @staticmethod
    def solid_wet():
        """An untraversable wet tile that has been filled in the passage generator."""
        return Tiles.tile("solid_wet", "≈", Color.cool_gray()).impassable()

    @staticmethod
    def passage_wet():
        """A traversable wet tile that the passage generator knows must remain open."""
        return Tiles.tile("passage_wet", "-", Color.light_blue()).open()

    @staticmethod
    def doorway():
        """The end of a passage."""
        return Tiles.tile("doorway", "○", Color.light_cool_gray()).open()

    # Real Tiles

    ## Walls
    @staticmethod
    def flagstone_wall():
        return Tiles.tile("flagstone_wall", "▒", Color.light_warm_gray()).solid()

    @staticmethod
    def granite_wall():
        return Tiles.tile("granite_wall", "▒", Color.cool_gray()).solid()

    @staticmethod
    def granite_1():
        return Tiles.tile("granite_1", "▓", Color.dark_cool_gray()).solid()

    ## Floors
    @staticmethod
    def flagstone_floor():
        return Tiles.tile("flagstone_floor", "·", Color.warm_gray()).open()

    @staticmethod
    def granite_floor():
        return Tiles.tile("granite_floor", "·", Color.dark_cool_gray()).open()

    @staticmethod
    def dirt_1():
        return Tiles.tile("dirt_1", "·", Color.brown()).open()

    @staticmethod
    def dirt_2():
        return Tiles.tile("dirt_2", "φ", Color.brown()).open()

    @staticmethod
    def grass():
        return Tiles.tile("grass", "░", Color.lima()).open()

    @staticmethod
    def tall_grass():
        return Tiles.tile("tall_grass", "√", Color.pea_green()).obfuscated()

    @staticmethod
    def tree_1():
        return Tiles.tile("tree", "▲", Color.sherwood()).solid()

    # Functions

    @staticmethod
    def tile(name: str, char: str, fore: Color):
        return TileType(name, char, fore)
